# GitHub Action for PHP with extensions
name: macOS

on:
  push:
    branches:
    - v5
  pull_request:
    branches:
    - v5

jobs:
  windows:
    name: macOS (PHP ${{ matrix.php-versions }} CI)
    runs-on: macos-latest
    container:
      image: mcr.microsoft.com/mssql/server
      env:
        ACCEPT_EULA: y
        SA_PASSWORD: Password12!
      ports:
        - 1433:1433/tcp
        - 1434:1434/tcp
    strategy:
      fail-fast: false
      matrix:
        operating-system: [macos-latest]
        php-versions: ['7.3']

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, fileinfo, mysqli, pdo_mysql, pgsql, pdo_pgsql, sqlite3, pdo_sqlite, sqlsrv, pdo_sqlsrv, xdebug
          coverage: xdebug
      - name: Brew Install MySQL
        run: |
          brew install mysql@5.7
      - name: Brew Start MySQL
        run: |
          brew services start mysql@5.7
          brew link mysql@5.7 --force
          mysqld --initialize-insecure
          mysql.server start
      - name: Setup MySQL Database
        run: |
          mysql -u root -e "CREATE DATABASE IF NOT EXISTS ez_test;"
          mysql -u root -e "CREATE USER ez_test@localhost IDENTIFIED BY 'ezTest'; GRANT ALL ON ez_test.* TO ez_test@localhost; FLUSH PRIVILEGES;"
      - name: Brew Start PostgreSql
        run: |
          sudo mkdir /var/pgsql_socket/
          sudo ln -s /private/tmp/.s.PGSQL.5432 /var/pgsql_socket/
          pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start
          brew services restart postgresql
      - name: Setup PostgreSql Database
        run: |
          createuser -s postgres
          psql -U postgres --command="CREATE USER ez_test PASSWORD 'ezTest'" --command="\du"
          createdb --owner=ez_test ez_test
      - name: "[Pre] Install Requirements"
        shell: bash
        run: |
          brew install coreutils
          brew install bash
          brew install socat

      - name: "[Pre] Install Docker"
        shell: bash
        run: |
          brew install docker docker-machine-driver-xhyve
          sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
          sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
          while ! docker-machine create --driver xhyve default; do
            docker-machine rm -f default
            sleep 1;
          done
          # Export variable (this target)
          eval "$(docker-machine env default)"
          DOCKER_TLS_VERIFY="$( docker-machine env default | grep DOCKER_TLS_VERIFY | sed -e 's/.*="//g' -e 's/"$//g' )"
          DOCKER_HOST="$( docker-machine env default | grep DOCKER_HOST | sed -e 's/.*="//g' -e 's/"$//g' )"
          DOCKER_CERT_PATH="$( docker-machine env default | grep DOCKER_CERT_PATH | sed -e 's/.*="//g' -e 's/"$//g' )"
          DOCKER_MACHINE_NAME="$( docker-machine env default | grep DOCKER_MACHINE_NAME | sed -e 's/.*="//g' -e 's/"$//g' )"
          # Export variable (this other targets)
          # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-environment-variable-set-env
          echo ::set-env name=DOCKER_TLS_VERIFY::${DOCKER_TLS_VERIFY}
          echo ::set-env name=DOCKER_HOST::${DOCKER_HOST}
          echo ::set-env name=DOCKER_CERT_PATH::${DOCKER_CERT_PATH}
          echo ::set-env name=DOCKER_MACHINE_NAME::${DOCKER_MACHINE_NAME}
          # Show info
          docker-machine ls
          docker-machine env default
          docker version

      - name: "[Pre] Install Docker Compose"
        shell: bash
        run: |
          sudo curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: "[Pre] Setup Docker machine"
        shell: bash
        run: |
          # Setup DNS records
          echo "127.0.0.1 localhost" | sudo tee -a /etc/hosts

          # Portforwarding from DOCKER_HOST to local
          HOST="$( echo "${DOCKER_HOST}" | sed -e 's|^tcp://||g' -e 's|:.*||g' )"
          echo "${HOST}"
          sudo socat -s -d -d tcp-listen:80,reuseaddr,fork tcp:${HOST}:80 &
          sleep 2
          sudo socat -s -d -d tcp-listen:443,reuseaddr,fork tcp:${HOST}:443 &
          sleep 2
          if ! netstat -an | grep -i LISTEN | grep -E '(:80)|(\.80)\s'; then
            netstat -an | grep -i LISTEN;
            false;
          fi
          if ! netstat -an | grep -i LISTEN | grep -E '(:443)|(\.443)\s'; then
            netstat -an | grep -i LISTEN;
            false;
          fi
          host localhost
          curl -sS -I 'http://localhost:80' || true
          curl -sS -I 'https://localhost:443' || true

      - name: "[Info] Show environment"
        shell: bash
        run: |
          env
        if: success() || failure()

      - name: "[Info] Show network"
        shell: bash
        run: |
          netstat -an || true
          ss -tlun || true
        if: success() || failure()
      - name: Docker Install SQLServer
        run: |
          docker pull mcr.microsoft.com/mssql/server
          docker run --name ms_sql_server -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password12!' -p 1433:1433 -p 1434:1434 -d mcr.microsoft.com/mssql/server
      - name: Brew Install ODBC 17 and MSSQL Tools
        run: |
          /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
          brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release
          brew update
          HOMEBREW_NO_ENV_FILTERING=1 ACCEPT_EULA=y brew install mssql-tools
      - name: Setup SQLServer Database
        run: |
          sqlcmd -S localhost,1433 -U sa -P Password12! -Q "CREATE DATABASE ez_test"
          sqlcmd -S localhost,1433 -U sa -P Password12! -d ez_test -Q "CREATE LOGIN ez_test WITH PASSWORD=N'ezTest', DEFAULT_DATABASE=ez_test, CHECK_EXPIRATION=OFF, CHECK_POLICY=OFF; ALTER SERVER ROLE [sysadmin] ADD MEMBER ez_test"
      - name: Install dependencies
        run: composer update
      - name: Test with phpunit
        run: vendor/bin/phpunit --coverage-clover=coverage.xml
      - name: Submit code coverage
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml # optional
